// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO shurls (hash, url) VALUES ($1, $2) RETURNING id, hash, url, hits
`

type CreateUrlParams struct {
	Hash string `json:"hash"`
	Url  string `json:"url"`
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Shurl, error) {
	row := q.db.QueryRowContext(ctx, createUrl, arg.Hash, arg.Url)
	var i Shurl
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Url,
		&i.Hits,
	)
	return i, err
}

const getUrl = `-- name: GetUrl :one
SELECT id, hash, url, hits FROM shurls WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUrl(ctx context.Context, id int64) (Shurl, error) {
	row := q.db.QueryRowContext(ctx, getUrl, id)
	var i Shurl
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Url,
		&i.Hits,
	)
	return i, err
}

const getUrlFromHash = `-- name: GetUrlFromHash :one
SELECT id, hash, url, hits FROM shurls WHERE hash = $1 LIMIT 1
`

func (q *Queries) GetUrlFromHash(ctx context.Context, hash string) (Shurl, error) {
	row := q.db.QueryRowContext(ctx, getUrlFromHash, hash)
	var i Shurl
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Url,
		&i.Hits,
	)
	return i, err
}

const updateUrl = `-- name: UpdateUrl :exec
UPDATE shurls SET hits = $2 WHERE id = $1
`

type UpdateUrlParams struct {
	ID   int64 `json:"id"`
	Hits int64 `json:"hits"`
}

func (q *Queries) UpdateUrl(ctx context.Context, arg UpdateUrlParams) error {
	_, err := q.db.ExecContext(ctx, updateUrl, arg.ID, arg.Hits)
	return err
}
